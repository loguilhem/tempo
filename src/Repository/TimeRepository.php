<?php

namespace App\Repository;

use App\Entity\Project;
use App\Entity\Task;
use App\Entity\User;

/**
 * TimeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimeRepository extends \Doctrine\ORM\EntityRepository
{
    public function getTimes(array $projects = null, array $tasks = null, array $users = null, \DateTime $start = null, \DateTime $end = null)
    {
        $qb = $this->createQueryBuilder('time');

        if ($projects) {
            $qb->join('time.project', 'project')
                ->andWhere('time.project IN (:projects)')
                ->setParameter('projects', $projects)
                ->addSelect('project')
            ;
        }

        if ($tasks) {
            $qb->join('time.task', 'task')
                ->andWhere('time.task IN (:tasks)')
                ->setParameter('tasks', $tasks)
                ->addSelect('task')
            ;
        }

        if ($users) {
            $qb->join('time.user', 'user')
                ->andWhere('time.user IN (:users)')
                ->setParameter('users', $users)
                ->addSelect('user')
            ;
        }

        if ($start && $end) {
            $qb->andWhere('time.startTime >= :start')
                ->andWhere('time.endTime <= :end')
                ->setParameter('start', $start)
                ->setParameter('end', $end)
            ;
        }

        return $qb->getQuery()->getResult();
    }

    function getByDossierExercice($idDossier, $exercice, $dateDebut, $dateFin, $forever)
    {
        if ($forever == false)
        {
            $query = $this->createQueryBuilder('t')
                ->where('t.dossier = ' . $idDossier)
                ->andWhere('t.exercice = ' . $exercice)
                ->andWhere('t.date BETWEEN :debut AND :fin')
                ->setParameter('debut', $dateDebut)
                ->setParameter('fin', $dateFin)
            ;
        }
        else
        {
            $query = $this->createQueryBuilder('t')
                ->where('t.dossier = ' . $idDossier)
                ->andWhere('t.exercice = ' . $exercice)
            ;
        }

        return $query->getQuery()->getResult();
    }

    function getSumByDossierExercice($idDossier, $exercice, $dateDebut, $dateFin, $forever)
    {
        if ($forever == false)
        {
            $query = $this->createQueryBuilder('t')
                ->join('t.tache', 'tac')
                ->where('t.dossier = ' . $idDossier)
                ->andWhere('t.exercice = ' . $exercice)
                ->andWhere('t.date BETWEEN :debut AND :fin')
                ->setParameter('debut', $dateDebut)
                ->setParameter('fin', $dateFin)
                ->select('tac.intitule AS intitule, tac.numero AS num, SUM(t.tempspasse) AS tempstotal')
                ->groupBy('t.tache')
            ;
        }
        else
        {
            $query = $this->createQueryBuilder('t')
                ->join('t.tache', 'tac')
                ->where('t.dossier = ' . $idDossier)
                ->andWhere('t.exercice = ' . $exercice)
                ->select('tac.intitule AS intitule, tac.numero AS num, SUM(t.tempspasse) AS tempstotal')
                ->groupBy('t.tache')
            ;
        }

        return $query->getQuery()->getResult();
    }

    public function getByCompany($company)
    {
        return $this->createQueryBuilder('t')
            ->join('t.user', 'u')
            ->join('u.company', 'c')
            ->where('u.company = :company')
            ->setParameter('company', $company)
            ->getQuery()
            ->getResult()
            ;
    }
}
