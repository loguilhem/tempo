<?php


namespace Tests\Service;

use App\Entity\Company;
use App\Entity\Project;
use App\Entity\Task;
use App\Entity\Time;
use App\Entity\User;
use App\Service\AnalyticsServices;
use Doctrine\ORM\EntityManager;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Security\Core\Security;

class AnalyticsServicesTest extends TestCase
{
    protected $service;
    protected $em;
    protected $security;
    protected $projects;
    protected $tasks;
    protected $times;
    protected $users;

    public function setUp(): void
    {
        $this->users = $this->createMock(User::class);
        $company = $this->createMock(Company::class);
        $this->users->method('getCompany')->willReturn($company);

        $this->em = $this->createMock(EntityManager::class);
        $this->security = $this->createMock(Security::class);
        $this->security->method('getUser')->willReturn($this->users);

        $this->service = new AnalyticsServices($this->em, $this->security);

        $this->projects = $this->createMock(Project::class);
        $this->tasks = $this->createMock(Task::class);
        $this->times = $this->createMock(Time::class);

        $this->projects->method('getId')->willReturn(1);
        $this->projects->method('getName')->willReturn('projectName');
        $this->tasks->method('getId')->willReturn(1);
        $this->tasks->method('getName')->willReturn('taskName');
        $this->times->method('getProject')->willReturn($this->projects);
        $this->times->method('getTask')->willReturn($this->tasks);
        $this->times->method('getUser')->willReturn($this->users);
        $this->times->method('getEndTime')->willReturn(new \DateTime('now'));
        $this->times->method('getStartTime')->willReturn((new \DateTime('now'))->sub(new \DateInterval('P1DT4H5M')));


    }

    public function testAnalyzePerProjects()
    {
        $service = $this->service->analyzePerProjects([$this->projects], [$this->tasks], [$this->users], [$this->times]);
        $this->assertIsArray($service);
    }

    public function testAnalyzePerTasks()
    {
        $service = $this->service->analyzePerTasks([$this->projects], [$this->tasks], [$this->users], [$this->times]);
        $this->assertIsArray($service);
    }

    public function testAnalyzePerUsers()
    {
        $service = $this->service->analyzePerUsers([$this->projects], [$this->tasks], [$this->users], [$this->times]);
        $this->assertIsArray($service);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}